#title Задание 1-6.
#author Лапин Ярослав

* Расчет областей захваченных, локально-захваченных и высыпающихся  частиц для прогноза радиационной опасности.

        Выполнил Лапин Ярослав. 14/01/2011.

* Код
<example>
	program task6
	external igrf_gsm, t89c
	real :: xx(1000), yy(1000), zz(1000), len
        open (unit=1, file='data.dat')

	R0=1.+300./6371.
	Rll=1.+100./6371.
	RLIM=60.0
	IOPT=1	  
	
	call recalc(2000,90,1,1,1)
	do long = -179, 180
	do lat = -63,63
	  print *, long, lat
	  THETA = (90-lat)*3.14/180.0
	  PHI = long*3.14/180.0
	  call sphcar(R0,THETA,PHI,XGEO,YGEO,ZGEO,1)
	  call geogsm(XGEO,YGEO,ZGEO,XGSM,YGSM,ZGSM,1)
	  if (lat.lt.0) then
	    dir = -1.
	  else
	    dir = 1.
	  end if
          call igrf_gsm(XGSM,YGSM,ZGSM,HX,HY,HZ)
	  call trace(XGSM,YGSM,ZGSM,dir,RLIM,Rll,IOPT,PARMOD,T89C,
     _					IGRF_GSM,XF,YF,ZF,XX,YY,ZZ,L)
	  if (sqrt(xf**2+yf**2+zf**2).gt.2.) then
	     print *, 'Error: line from ', lat, long, ' isn''t closed'
	     print *, sqrt(xf**2+yf**2+zf**2)
	     stop 1
	  end if
	  call igrf_gsm(xf,yf,zf,HXf,HYf,HZf)
	  field = sqrt(HX**2+HY**2+HZ**2)
	  field_delta = field - sqrt(HXf**2+HYf**2+HZf**2)

	  !! len = int (1-B/Bm)*ds
	  len = 0.
	  Bm = sqrt(HX**2+HY**2+HZ**2) ! or on Rll?
	  do i=1, L-1
	     ds = sqrt((xx(i)-xx(i+1))**2+(yy(i)-yy(i+1))**2+
     _            (zz(i)-zz(i+1))**2)
	     call igrf_gsm(xx(i),yy(i),zz(i),Hxx,Hyy,Hzz)
	     B = sqrt(Hxx**2+Hyy**2+Hzz**2)
	     if (B.lt.Bm) then
		len = len + sqrt(1-B/Bm)*ds
	     end if
	  end do
	  
	  write (1, '(2i8,4f10.2)') long, lat, field, field_delta, len
	end do
c	  write (1, *) ''
	end do
	end program
</example>

** Программа для визуализации

<example>
#!/usr/bin/python

from matplotlib.mlab import griddata
import numpy as np
import matplotlib.pyplot as plt

def plotone(x,y,z):
    #z = np.maximum( z, 0.001); z = np.minimum( z, 10 );

    xi = np.linspace(-180,180, 200)
    yi = np.linspace(-90,90, 100)
    zi = griddata(x, y, z, xi, yi)

    CS = plt.contour(xi,yi,zi,15,linewidths=0.5,colors='k')
    CS = plt.contourf(xi,yi,zi,15,cmap=plt.cm.jet)
    plt.xlim(np.min(xi),np.max(xi))
    plt.ylim(np.min(yi),np.max(yi))
    plt.colorbar() # draw colorbar


plt.figure(num=None, figsize=(12, 10), dpi=90, facecolor='w', edgecolor='k') 

data = np.genfromtxt("data.dat")

x = data[:,0]
y = data[:,1]

print x

plt.subplot(2, 1, 1);plotone(x,y,data[:,3])
plt.title('field diff')

plt.subplot(2, 1, 2);plotone(x,y,np.log(data[:,4]))
plt.title('I = \int ds \sqrt{(1-B/Bm)}')

plt.savefig("lines.png")
</example>

** Результат

[[lines.png]]

** Вывод

; TODO
